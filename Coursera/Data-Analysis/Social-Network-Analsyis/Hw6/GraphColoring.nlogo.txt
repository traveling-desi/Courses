globals
[
  color-list
  time
  degrees
  new-node
  mean-score
  av-time
]

turtles-own
[
  score
]


;;;;;;;;;;;;;;;;;;;;;;;
;;; Main Procedures ;;;
;;;;;;;;;;;;;;;;;;;;;;;

to go
  set mean-score mean [score] of turtles
  if (mean [score] of turtles = 1)
    [stop]
;  clear-last-round
  ask turtles [ update-color ]                        ;;have turtles try to find a partner
;  let partnered-turtles turtles with [ partnered? ]
;  ask partnered-turtles [ select-action ]           ;;all partnered turtles select action
  ask turtles [ get-payoff ]

  do-plotting
  tick
  set time ticks
end

to update-color 
  let newcolor color
  let numgreen count link-neighbors with [color = green]
  let numred count link-neighbors with [color = red]
  let numyellow count link-neighbors with [color = yellow]
  let numblue count link-neighbors with [color = blue]
  let minnum min (list numgreen numred numyellow numblue)
  let goodlist []
  if (numgreen <= minnum) [set goodlist fput green goodlist]
  if (numred <= minnum) [set goodlist fput red goodlist]
  if (numblue <= minnum) [set goodlist fput blue goodlist]
  if (numyellow <= minnum) [set goodlist fput yellow goodlist]
  set color one-of goodlist
end

;;layout all nodes and links
to do-layout
  repeat 5 [layout-spring turtles links 0.2 4 0.9]
  display
end


;;calculate the payoff for this round and
;;display a label with that payoff.
to get-payoff
  let mycolor color
  let sumscore 0.0
  ifelse (count link-neighbors = 0) [
    set score 1.0
  ] [
  ask link-neighbors [
    if (color != mycolor) [
      set sumscore sumscore + 1.0]
  ]
  set score (sumscore / count link-neighbors)
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup Procedures ;;;
;;;;;;;;;;;;;;;;;;;;;;;;

to generate-lattice-topology

  ct
  
  create-turtles num-nodes [
      set shape "circle"
      set size int (800 / (num-nodes + 200))
    ]

  ;; setup small world topology
  set-default-shape turtles "outlined circle"
  create-lattice
  rewire-network
  
  set-random-colors
  layout-turtles
end

to generate-ba-topology
  ;; (for this model to work with NetLogo's new plotting features,
  ;; __clear-all-and-reset-ticks should be replaced with clear-all at
  ;; the beginning of your setup procedure and reset-ticks at the end
  ;; of the procedure.)
  if (any? links) [ask links [die]]
  ct
  
  set-default-shape turtles "circle"
  set degrees []   ;; initialize the array to be empty
  ;; make the initial network of two turtles and an edge
  
  make-node ;; add the very first node
  
  let first-node new-node  ;; remember that its the first node
  
  ;; the following few lines create a cycle of length 5
  ;; this is just an arbitrary way to start a network
  
  let prev-node new-node
  repeat 4 [
    make-node ;; second node
    make-edge new-node prev-node ;; make the edge
    set degrees lput prev-node degrees
    set degrees lput new-node degrees
    set prev-node new-node
  ]
  make-edge new-node first-node
  
  set time 0

  while [count turtles < num-nodes] [
    ;; new edge is green, old edges are gray
    ask links [ set color gray + 2]
    ;; old turtles are blue
    ask turtles [set color gray + 2]
  
    make-node  ;; add one new node
  
    ;; it's going to have m edges
    repeat m [
      let partner find-partner new-node      ;; find a partner for the new node
      ask partner [set color gray + 2]    ;; set color of partner to gray
      make-edge new-node partner     ;; connect it to the partner we picked before
    ]
    do-layout
  ]

  set-random-colors
end

;;set the variables that all turtles share
to set-random-colors
set color-list [ blue yellow red green]
  ask turtles [
    set score 0
       set color item ( random length color-list ) color-list
  ]
end


to layout-turtles
  
  ;; Layout turtles:
  layout-circle (sort turtles) max-pxcor - 8
  ;; space out turtles to see clustering
  ask turtles
  [
    facexy 0 0
    if who mod 2 = 0 [fd 4]
    set color item ( random length color-list ) color-list
  ]
  display
end
  
;; WARNING: the simplified rewiring algorithm does not certain checks (ie disconnected graph)
;; for large networksthis shouldn't be too much of an issue.
to rewire-network
  ask links
  [
    ;; whether to rewire it or not?
    if (random-float 1) < rewiring-probability
    [
      ask end1
      [
        create-link-with one-of other turtles with [not link-neighbor? myself ]
          [set color gray + 1.5]
      ]
      die
    ]
  ]
end


;; creates a new lattice
to create-lattice
  reset-ticks
  ;; iterate over the nodes
  let n 0
  while [n < count turtles]
  [
    ;; connect to closest neighbor
    ask turtle n [
              create-link-with
              turtle ((n + 1) mod count turtles)
              create-link-with
              turtle ((n + 2) mod count turtles)
    ]
    set n n + 1
  ]
  
end


;; connects the two nodes
to make-link-between [node1 node2]
  ask node1 [
    create-link-with node2
      [ set color gray + 1.5]
  ]
end

to vary-small-world
  let sum-times 0
  set av-time 0
  
   set-current-plot "av. time to solution"
   clear-plot
  
  set rewiring-probability 1
  while [rewiring-probability >= 0] [
    set sum-times 0

    repeat num-rep [
      set-current-plot "mean score"
      clear-plot
      generate-lattice-topology
      rewire-network
      repeat 20 [
        set-random-colors
        reset-ticks
        while [mean [score] of turtles != 1] [
          go
        ]
        set sum-times (sum-times + ticks)
      ]
    ]
    set av-time (sum-times / num-rep / 20)
     set-current-plot "av. time to solution"
     set-current-plot-pen "av-time"

     plotxy rewiring-probability av-time
     set rewiring-probability (rewiring-probability - 0.1)
  ]
end

to vary-ba-topology
  let sum-times 0
  set av-time 0
  
   set-current-plot "av. time to solution"
   clear-plot
  
  set prob-pref 1
  while [prob-pref >= 0] [
    set sum-times 0

    repeat num-rep [
      set-current-plot "mean score"
      clear-plot
      generate-ba-topology
      repeat 20 [
        set-random-colors
        reset-ticks
        while [mean [score] of turtles != 1] [
          go
        ]
        set sum-times (sum-times + ticks)
      ]
    ]
    set av-time (sum-times / num-rep / 20)
     set-current-plot "av. time to solution"
     set-current-plot-pen "av-time"

     plotxy prob-pref av-time
     set prob-pref (prob-pref - 0.1)
  ]
end

to-report find-partner [node1]
  ;; set a local variable called ispref that
  ;; determines if this link is going to be
  ;; preferential of not
  let ispref (random-float 1 <= prob-pref)
  
  ;; initialize partner to be the node itself
  ;; this will have to be changed
  let partner node1
  
  ;; if preferential attachment then choose
  ;; from our degrees array
  ;; otherwise chose one of the turtles at random
  ifelse ispref 
  [
    set partner one-of degrees
   ]
   [
     set partner one-of turtles
     ]
     
   ;; but need to check that partner chosen isn't
   ;; the node itself and also isn't a node that
   ;; our node is already connected to
   ;; if this is the case, it will try another
   ;; partner and try again
  let checkit true
  while [checkit] [
    ask partner [
      ifelse ((link-neighbor? node1) or (partner = node1))
        [
          ifelse ispref 
          [
            set partner one-of degrees
           ]
           [
             set partner one-of turtles
           ]
            set checkit true
         ]
         [
           set checkit false
         ]
       ] 
    ]
  report partner
end

;; connects the two turtles
to make-edge [node1 node2]
  ask node1 [
    ifelse (node1 = node2) 
    [
      show "error: self-loop attempted"
    ]
    [
      create-link-with node2 [ set color green ]
     ;; position the new node near its partner
      setxy ([xcor] of node2) ([ycor] of node2)
      rt random 360
      fd 8
      set degrees lput node1 degrees
     set degrees lput node2 degrees
     ]
  ]
end

to make-node
  create-turtles 1  ;; don't know what this is - lada
  [
    set color gray + 2
    set size 2
    set new-node self ;; set the new-node global
  ]
end
;;;;;;;;;;;;;;;;
;;; Plotting ;;;
;;;;;;;;;;;;;;;;

to do-plotting
     ;; plot the number of infected individuals at each step
     set-current-plot "mean score"
     set-current-plot-pen "score"
     
     let tmp mean [score] of turtles
     plotxy ticks tmp
end
@#$#@#$#@
GRAPHICS-WINDOW
295
10
723
459
80
80
2.6
1
10
1
1
1
0
0
0
1
-80
80
-80
80
1
1
1
ticks
30.0

SLIDER
7
91
209
124
num-nodes
num-nodes
100
500
250
1
1
NIL
HORIZONTAL

SLIDER
5
152
208
185
rewiring-probability
rewiring-probability
0
1
0
0.01
1
NIL
HORIZONTAL

PLOT
6
265
283
459
mean score
time
n
0.0
1.0
0.0
1.0
true
false
"" ""
PENS
"score" 1.0 0 -2674135 true "" ""

BUTTON
6
48
90
81
go once
go
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
176
48
252
81
layout
do-layout
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
6
10
152
43
generate small world
generate-lattice-topology
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
99
48
162
81
NIL
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
6
214
178
247
prob-pref
prob-pref
0
1
1
0.01
1
NIL
HORIZONTAL

SLIDER
183
214
275
247
m
m
1
2
1
1
1
NIL
HORIZONTAL

BUTTON
158
10
295
43
NIL
generate-ba-topology
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
728
10
867
43
NIL
vary-small-world
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

PLOT
730
47
1022
282
av. time to solution
rewiring/pref probability
av. time to solution
0.0
1.0
0.0
10.0
true
false
"" ""
PENS
"av-time" 1.0 0 -7500403 true "" ""

SLIDER
733
288
905
321
num-rep
num-rep
0
10
5
1
1
NIL
HORIZONTAL

TEXTBOX
9
199
209
227
growing network parameters
11
0.0
1

TEXTBOX
8
137
158
155
small-world network 
11
0.0
1

BUTTON
872
10
1014
43
NIL
vary-ba-topology
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

@#$#@#$#@
## HOW IT WORKS

This is a model of graph coloring. Adjacent nodes strive to have different colors. Each node's strategy is to choose the color that it observes the least in its neighborhood. This model measures how long the network takes to solve this problem (that is how long does it take until no two adjacent nodes have the same color). 

You can try this on two types of network toplogy:
1) a small world network topology
2) a growing network with a tunable preferential attachment topology

## HOW TO USE IT

First choose what kind of topology you'd like to run graph coloring on.
If you choose GENERATE-SMALL-WORLD, then you'll get a lattice where every node is connected to its two closest neighbors. A fraction REWIRE-PROBABILITY will be rewired randomly.

If you choose GENERATE-BA-TOPOLOGY, then the network will be grown such that nodes are added one at a time, each with M links. With probability PROB-PREF the attachment will be in proportion to the number of edges the existing node already has (rich-get-richer, or preferential attachment). With probability (1 - PROB-PREF), the new node will attach to an existing node at random.

Click GO-ONCE to have each node try to change color just once. Click GO (forever) to have the nodes update until they achieve a solution.

To see how the speed with which the network converges to a solution varies with the rewiring probability in the small-world network topology, use VARY-SMALL-WORLD. However, this will generate a new topology and solve the problem NUM-REP times for each rewiring probability (0,0.1,0.2,...). So you'll probably want to uncheck 'view updates' at the top so that this process goes more quickly. 

## CREDITS AND REFERENCES

This model was adapted from: Wilensky, U. (2005).  NetLogo Small Worlds model.  http://ccl.northwestern.edu/netlogo/models/SmallWorlds.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Model is based on:
Michael Kearns, Siddarth Suri,Nick Montfort, An Experimental Study of the Coloring Problem on Human Subject Networks, Science 313, 824 (2006).

It was written by Lada Adamic, 2008-2012
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

link
true
0
Line -7500403 true 150 0 150 300

link direction
true
0
Line -7500403 true 150 150 30 225
Line -7500403 true 150 150 270 225

outlined circle
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 false false -1 -1 301

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270

@#$#@#$#@
NetLogo 5.0.2
@#$#@#$#@
setup
repeat 5 [rewire-one]
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="vary-rewiring-probability" repetitions="5" runMetricsEveryStep="false">
    <go>rewire-all</go>
    <timeLimit steps="1"/>
    <exitCondition>rewiring-probability &gt; 1</exitCondition>
    <metric>average-path-length</metric>
    <metric>clustering-coefficient</metric>
    <steppedValueSet variable="rewiring-probability" first="0" step="0.025" last="1"/>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180

@#$#@#$#@
0
@#$#@#$#@
